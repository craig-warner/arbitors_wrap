var searchIndex = JSON.parse('{\
"arbitor":{"doc":"Arbitor Crate","t":[0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["arbitor","RRArb","RRArbIterator","arb","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","clr_request","fmt","from","from","grant","into","into","into_iter","iter","new","next","set_request","step","text_display","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["arbitor","arbitor::arbitor","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","Select the next requestor based on the last requestor …","","","","","","","Indicate a bidder is no longer contending for a shared …","","Returns the argument unchanged.","Returns the argument unchanged.","Select the a specified requestor. The req_id must specify …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Produce an interator for walking through all the requestor.","Create a new Round Robin Arbitor","","Indicate a bidder is contending for a shared resource.  …","Should be called each cycle, so resetting on idle …","Print the Arbitor State","","","","","","",""],"i":[0,0,0,1,6,1,6,1,1,1,1,1,6,1,1,6,1,6,1,1,6,1,1,1,1,6,1,6,1,6,1],"f":[0,0,0,[1,[[3,[2]]]],[[]],[[]],[[]],[[]],[1,1],[[]],[[1,2]],[[1,4],5],[[]],[[]],[[1,2]],[[]],[[]],[[]],[1,6],[[2,7],1],[6,3],[[1,2]],[1],[1],[[]],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9]],"p":[[3,"RRArb"],[15,"u64"],[4,"Option"],[3,"Formatter"],[6,"Result"],[3,"RRArbIterator"],[15,"bool"],[4,"Result"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
